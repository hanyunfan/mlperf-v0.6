Beginning trial 2 of 3
Run vars: id 191021115557694882486
Gathering sys log on dss01
:::MLL 1571677059.964 submission_benchmark: {"value": "resnet", "metadata": {"lineno": 226, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.965 submission_org: {"value": "NVIDIA", "metadata": {"lineno": 231, "file": "mlperf_log_utils.py"}}
WARNING: Log validation: Key "submission_division" is not in known resnet keys.
:::MLL 1571677059.965 submission_division: {"value": "closed", "metadata": {"lineno": 235, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.966 submission_status: {"value": "onprem", "metadata": {"lineno": 239, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.966 submission_platform: {"value": "1xDSS8440", "metadata": {"lineno": 243, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.967 submission_entry: {"value": "{'hardware': 'DSS8440', 'libraries': \"{'cublas_version': '10.2.0.163', 'nccl_version': '2.4.6', 'openmpi_version': '3.1.3', 'container_base': 'Ubuntu-16.04', 'dali_version': '0.9.1', 'mofed_version': '5.0-0', 'cuda_driver_version': '418.67', 'trt_version': '5.1.5.0', 'cudnn_version': '7.6.0.64', 'cuda_version': '10.1.163'}\", 'os': '\\\\S / ', 'framework': 'MXNet NVIDIA Release 19.05', 'nodes': \"{'num_nodes': '1', 'notes': '', 'num_cores': '40', 'sys_storage_size': '1x 931.5G + 1x 447.1G', 'sys_mem_size': '754 GB', 'accelerator': 'Tesla V100-PCIE-32GB', 'sys_storage_type': 'SATA SSD', 'network_card': 'Mellanox Technologies MT27700 Family [ConnectX-4]', 'num_vcpus': '40', 'cpu': '2x Intel(R) Xeon(R) Gold 6230 CPU @ 2.10GHz', 'num_accelerators': '8', 'num_network_cards': '1', 'cpu_accel_interconnect': 'UPI'}\", 'interconnect': 'InfiniBand 100 Gb/sec (4X EDR)', 'notes': 'N/A', 'power': 'N/A', 'compilers': 'gcc (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609'}", "metadata": {"lineno": 247, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.967 submission_poc_name: {"value": "Paulius Micikevicius", "metadata": {"lineno": 251, "file": "mlperf_log_utils.py"}}
:::MLL 1571677059.968 submission_poc_email: {"value": "pauliusm@nvidia.com", "metadata": {"lineno": 255, "file": "mlperf_log_utils.py"}}
Clearing cache on dss01
:::MLL 1571677070.869 cache_clear: {"value": true, "metadata": {"lineno": 1, "file": "<string>"}}

Launching user script on master node:
[1,0]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,0]<stdout>:running benchmark
[1,1]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,1]<stdout>:running benchmark
[1,2]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,2]<stdout>:running benchmark
[1,3]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,3]<stdout>:running benchmark
[1,4]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,4]<stdout>:running benchmark
[1,5]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,5]<stdout>:running benchmark
[1,6]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,6]<stdout>:running benchmark
[1,7]<stdout>:STARTING TIMING RUN AT 2019-10-21 04:57:51 PM
[1,7]<stdout>:running benchmark
[1,7]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,0]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,1]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,2]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,3]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,4]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,5]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
[1,6]<stderr>:[16:57:52] src/operator/nn/cudnn/cudnn_algoreg.cc:53: cuDNN library mismatch: linked-against version 7604 != compiled-against version 7600
--------------------------------------------------------------------------
WARNING: One or more nonexistent OpenFabrics devices/ports were
specified:

  Host:                 dss01
  MCA parameter:        mca_btl_if_include
  Nonexistent entities: mlx5_3

These entities will be ignored.  You can disable this warning by
setting the btl_openib_warn_nonexistent_if MCA parameter to 0.
--------------------------------------------------------------------------
[1,1]<stdout>::::MLL 1571677081.332 init_start: {"value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83}}
[1,2]<stdout>::::MLL 1571677081.339 init_start: {"value": null, "metadata": {"lineno": 83, "file": "train_imagenet.py"}}
[1,4]<stdout>::::MLL 1571677081.339 init_start: {"value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83}}
[1,6]<stdout>::::MLL 1571677081.339 init_start: {"value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83}}
[1,7]<stdout>::::MLL 1571677081.340 init_start: {"value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83}}
[1,0]<stdout>::::MLL 1571677081.339 init_start: {"metadata": {"lineno": 83, "file": "train_imagenet.py"}, "value": null}
[1,5]<stdout>::::MLL 1571677081.339 init_start: {"metadata": {"lineno": 83, "file": "train_imagenet.py"}, "value": null}
[1,3]<stdout>::::MLL 1571677081.341 init_start: {"value": null, "metadata": {"lineno": 83, "file": "train_imagenet.py"}}
[dss01:00861] 7 more processes have sent help message help-mpi-btl-openib.txt / nonexistent port
[dss01:00861] Set MCA parameter "orte_base_help_aggregate" to 0 to see all help / error messages
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_initial_shape" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.371 model_hp_initial_shape: {"metadata": {"lineno": 266, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": [4, 224, 224]}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.372 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.373 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.374 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.375 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.376 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.377 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.377 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.378 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.379 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.380 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.381 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.382 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.383 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.383 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.384 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_shorcut_add" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.385 model_hp_shorcut_add: {"metadata": {"lineno": 192, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": null}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_final_shape" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.385 model_hp_final_shape: {"metadata": {"lineno": 309, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": 1000}
[1,0]<stdout>:WARNING: Log validation: Key "model_hp_loss_fn" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677095.386 model_hp_loss_fn: {"metadata": {"lineno": 320, "file": "symbols/resnet-v1b-normconv-fl.py"}, "value": "categorical_cross_entropy"}
[1,0]<stdout>::::MLL 1571677095.388 model_bn_span: {"metadata": {"lineno": 229, "file": "common/dali.py"}, "value": 312}
[1,5]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,2]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,0]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,1]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,4]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,3]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,7]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,6]<stdout>:WARNING: `nvJPEGDecoderRandomCrop` is now deprecated. Use `ImageDecoderRandomCrop` instead
[1,5]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,2]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,0]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,1]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,4]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,7]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,3]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,6]<stdout>:WARNING: `nvJPEGDecoder` is now deprecated. Use `ImageDecoder` instead
[1,0]<stdout>::::MLL 1571677105.133 init_stop: {"metadata": {"lineno": 187, "file": "train_imagenet.py"}, "value": null}
[1,0]<stdout>::::MLL 1571677105.133 run_start: {"metadata": {"lineno": 190, "file": "train_imagenet.py"}, "value": null}
[1,0]<stderr>:2019-10-21 16:58:25,133 Node[0] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='0', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63215, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,2]<stderr>:2019-10-21 16:58:25,133 Node[2] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='2', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=29049, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,3]<stderr>:2019-10-21 16:58:25,133 Node[3] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='3', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=33034, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,4]<stderr>:2019-10-21 16:58:25,133 Node[4] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='4', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=23971, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,7]<stderr>:2019-10-21 16:58:25,133 Node[7] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='7', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=15344, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,1]<stderr>:2019-10-21 16:58:25,133 Node[1] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='1', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=53154, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,5]<stderr>:2019-10-21 16:58:25,133 Node[5] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='5', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=44590, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,6]<stderr>:2019-10-21 16:58:25,133 Node[6] start with arguments Namespace(accuracy_threshold=0.759, batch_size=312, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_cache_size=0, dali_nvjpeg_memory_padding=256, dali_prefetch_queue=8, dali_roi_decode=True, dali_threads=3, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', epoch_size=0, eval_offset=3, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='6', image_shape='4,224,224', initializer='default', input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, log='', logging_dir='logs', lr=7.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-normconv-fl', num_classes=1000, num_epochs=72, num_examples=1281167, num_layers=50, optimizer='sgdwfastlars', pooling_layout='NHWC', profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=9807, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=5, warmup_strategy='linear', wd=0.0002)
[1,7]<stderr>:2019-10-21 16:58:27,952 Node[7] Already bound, ignoring bind()
[1,6]<stderr>:2019-10-21 16:58:27,970 Node[6] Already bound, ignoring bind()
[1,5]<stderr>:2019-10-21 16:58:28,149 Node[5] Already bound, ignoring bind()
[1,2]<stderr>:2019-10-21 16:58:28,170 Node[2] Already bound, ignoring bind()
[1,4]<stderr>:2019-10-21 16:58:28,373 Node[4] Already bound, ignoring bind()
[1,3]<stderr>:2019-10-21 16:58:28,389 Node[3] Already bound, ignoring bind()
[1,0]<stdout>::::MLL 1571677108.453 opt_base_learning_rate: {"metadata": {"lineno": 651, "file": "common/fit.py"}, "value": 7.5}
[1,0]<stdout>::::MLL 1571677108.453 opt_learning_rate_warmup_epochs: {"metadata": {"lineno": 652, "file": "common/fit.py"}, "value": 5}
[1,0]<stdout>::::MLL 1571677108.453 lars_opt_learning_rate_decay_steps: {"metadata": {"lineno": 662, "file": "common/fit.py"}, "value": 34438}
[1,0]<stdout>::::MLL 1571677108.454 lars_opt_learning_rate_decay_poly_power: {"metadata": {"lineno": 698, "file": "common/fit.py"}, "value": 2}
[1,0]<stdout>::::MLL 1571677108.454 lars_opt_end_learning_rate: {"metadata": {"lineno": 699, "file": "common/fit.py"}, "value": 0.0001}
[1,0]<stdout>::::MLL 1571677108.454 opt_name: {"metadata": {"lineno": 1075, "file": "common/fit.py"}, "value": "lars"}
[1,0]<stdout>::::MLL 1571677108.455 lars_epsilon: {"metadata": {"lineno": 1077, "file": "common/fit.py"}, "value": 0}
[1,0]<stdout>:WARNING: Log validation: Key "lars_opt_weight_decay" is not in known resnet keys.
[1,0]<stdout>::::MLL 1571677108.455 lars_opt_weight_decay: {"metadata": {"lineno": 1079, "file": "common/fit.py"}, "value": 0.0002}
[1,0]<stdout>:using wd on conv0_weight
[1,0]<stdout>:skipping wd on bn0_gamma
[1,0]<stdout>:skipping wd on bn0_beta
[1,0]<stdout>:using wd on stage1_unit1_conv1_weight
[1,0]<stdout>:skipping wd on stage1_unit1_bn1_gamma
[1,0]<stdout>:skipping wd on stage1_unit1_bn1_beta
[1,0]<stdout>:using wd on stage1_unit1_conv2_weight
[1,0]<stdout>:skipping wd on stage1_unit1_bn2_gamma
[1,0]<stdout>:skipping wd on stage1_unit1_bn2_beta
[1,0]<stdout>:using wd on stage1_unit1_conv3_weight
[1,0]<stdout>:skipping wd on stage1_unit1_bn3_gamma
[1,0]<stdout>:skipping wd on stage1_unit1_bn3_beta
[1,0]<stdout>:using wd on stage1_unit1_conv1sc_weight
[1,0]<stdout>:skipping wd on stage1_unit1_bn_sc_gamma
[1,0]<stdout>:skipping wd on stage1_unit1_bn_sc_beta
[1,0]<stdout>:using wd on stage1_unit2_conv1_weight
[1,0]<stdout>:skipping wd on stage1_unit2_bn1_gamma
[1,0]<stdout>:skipping wd on stage1_unit2_bn1_beta
[1,0]<stdout>:using wd on stage1_unit2_conv2_weight
[1,0]<stdout>:skipping wd on stage1_unit2_bn2_gamma
[1,0]<stdout>:skipping wd on stage1_unit2_bn2_beta
[1,0]<stdout>:using wd on stage1_unit2_conv3_weight
[1,0]<stdout>:skipping wd on stage1_unit2_bn3_gamma
[1,0]<stdout>:skipping wd on stage1_unit2_bn3_beta
[1,0]<stdout>:using wd on stage1_unit3_conv1_weight
[1,0]<stdout>:skipping wd on stage1_unit3_bn1_gamma
[1,0]<stdout>:skipping wd on stage1_unit3_bn1_beta
[1,0]<stdout>:using wd on stage1_unit3_conv2_weight
[1,0]<stdout>:skipping wd on stage1_unit3_bn2_gamma
[1,0]<stdout>:skipping wd on stage1_unit3_bn2_beta
[1,0]<stdout>:using wd on stage1_unit3_conv3_weight
[1,0]<stdout>:skipping wd on stage1_unit3_bn3_gamma
[1,0]<stdout>:skipping wd on stage1_unit3_bn3_beta
[1,0]<stdout>:using wd on stage2_unit1_conv1_weight
[1,0]<stdout>:skipping wd on stage2_unit1_bn1_gamma
[1,0]<stdout>:skipping wd on stage2_unit1_bn1_beta
[1,0]<stdout>:using wd on stage2_unit1_conv2_weight
[1,0]<stdout>:skipping wd on stage2_unit1_bn2_gamma
[1,0]<stdout>:skipping wd on stage2_unit1_bn2_beta
[1,0]<stdout>:using wd on stage2_unit1_conv3_weight
[1,0]<stdout>:skipping wd on stage2_unit1_bn3_gamma
[1,0]<stdout>:skipping wd on stage2_unit1_bn3_beta
[1,0]<stdout>:using wd on stage2_unit1_conv1sc_weight
[1,0]<stdout>:skipping wd on stage2_unit1_bn_sc_gamma
[1,0]<stdout>:skipping wd on stage2_unit1_bn_sc_beta
[1,0]<stdout>:using wd on stage2_unit2_conv1_weight
[1,0]<stdout>:skipping wd on stage2_unit2_bn1_gamma
[1,0]<stdout>:skipping wd on stage2_unit2_bn1_beta
[1,0]<stdout>:using wd on stage2_unit2_conv2_weight
[1,0]<stdout>:skipping wd on stage2_unit2_bn2_gamma
[1,0]<stdout>:skipping wd on stage2_unit2_bn2_beta
[1,0]<stdout>:using wd on stage2_unit2_conv3_weight
[1,0]<stdout>:skipping wd on stage2_unit2_bn3_gamma
[1,0]<stdout>:skipping wd on stage2_unit2_bn3_beta
[1,0]<stdout>:using wd on stage2_unit3_conv1_weight
[1,0]<stdout>:skipping wd on stage2_unit3_bn1_gamma
[1,0]<stdout>:skipping wd on stage2_unit3_bn1_beta
[1,0]<stdout>:using wd on stage2_unit3_conv2_weight
[1,0]<stdout>:skipping wd on stage2_unit3_bn2_gamma
[1,0]<stdout>:skipping wd on stage2_unit3_bn2_beta
[1,0]<stdout>:using wd on stage2_unit3_conv3_weight
[1,0]<stdout>:skipping wd on stage2_unit3_bn3_gamma
[1,0]<stdout>:skipping wd on stage2_unit3_bn3_beta
[1,0]<stdout>:using wd on stage2_unit4_conv1_weight
[1,0]<stdout>:skipping wd on stage2_unit4_bn1_gamma
[1,0]<stdout>:skipping wd on stage2_unit4_bn1_beta
[1,0]<stdout>:using wd on stage2_unit4_conv2_weight
[1,0]<stdout>:skipping wd on stage2_unit4_bn2_gamma
[1,0]<stdout>:skipping wd on stage2_unit4_bn2_beta
[1,0]<stdout>:using wd on stage2_unit4_conv3_weight
[1,0]<stdout>:skipping wd on stage2_unit4_bn3_gamma
[1,0]<stdout>:skipping wd on stage2_unit4_bn3_beta
[1,0]<stdout>:using wd on stage3_unit1_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit1_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit1_bn1_beta
[1,0]<stdout>:using wd on stage3_unit1_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit1_bn2_gamma
[1,0]<stdout>:skipping wd on stage3_unit1_bn2_beta
[1,0]<stdout>:using wd on stage3_unit1_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit1_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit1_bn3_beta
[1,0]<stdout>:using wd on stage3_unit1_conv1sc_weight
[1,0]<stdout>:skipping wd on stage3_unit1_bn_sc_gamma
[1,0]<stdout>:skipping wd on stage3_unit1_bn_sc_beta
[1,0]<stdout>:using wd on stage3_unit2_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit2_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit2_bn1_beta
[1,0]<stdout>:using wd on stage3_unit2_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit2_bn2_gamma
[1,0]<stdout>:skipping wd on stage3_unit2_bn2_beta
[1,0]<stdout>:using wd on stage3_unit2_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit2_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit2_bn3_beta
[1,0]<stdout>:using wd on stage3_unit3_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit3_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit3_bn1_beta
[1,0]<stdout>:using wd on stage3_unit3_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit3_bn2_gamma
[1,0]<stdout>:skipping wd on [1,0]<stdout>:stage3_unit3_bn2_beta
[1,0]<stdout>:using wd on stage3_unit3_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit3_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit3_bn3_beta
[1,0]<stdout>:using wd on stage3_unit4_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit4_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit4_bn1_beta
[1,0]<stdout>:using wd on stage3_unit4_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit4_bn2_gamma
[1,0]<stdout>:skipping wd on stage3_unit4_bn2_beta
[1,0]<stdout>:using wd on stage3_unit4_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit4_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit4_bn3_beta
[1,0]<stdout>:using wd on stage3_unit5_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit5_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit5_bn1_beta
[1,0]<stdout>:using wd on stage3_unit5_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit5_bn2_gamma
[1,0]<stdout>:skipping wd on stage3_unit5_bn2_beta
[1,0]<stdout>:using wd on stage3_unit5_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit5_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit5_bn3_beta
[1,0]<stdout>:using wd on stage3_unit6_conv1_weight
[1,0]<stdout>:skipping wd on stage3_unit6_bn1_gamma
[1,0]<stdout>:skipping wd on stage3_unit6_bn1_beta
[1,0]<stdout>:using wd on stage3_unit6_conv2_weight
[1,0]<stdout>:skipping wd on stage3_unit6_bn2_gamma
[1,0]<stdout>:skipping wd on stage3_unit6_bn2_beta
[1,0]<stdout>:using wd on stage3_unit6_conv3_weight
[1,0]<stdout>:skipping wd on stage3_unit6_bn3_gamma
[1,0]<stdout>:skipping wd on stage3_unit6_bn3_beta
[1,0]<stdout>:using wd on stage4_unit1_conv1_weight
[1,0]<stdout>:skipping wd on stage4_unit1_bn1_gamma
[1,0]<stdout>:skipping wd on stage4_unit1_bn1_beta
[1,0]<stdout>:using wd on stage4_unit1_conv2_weight
[1,0]<stdout>:skipping wd on stage4_unit1_bn2_gamma
[1,0]<stdout>:skipping wd on stage4_unit1_bn2_beta
[1,0]<stdout>:using wd on stage4_unit1_conv3_weight
[1,0]<stdout>:skipping wd on stage4_unit1_bn3_gamma
[1,0]<stdout>:skipping wd on stage4_unit1_bn3_beta
[1,0]<stdout>:using wd on stage4_unit1_conv1sc_weight
[1,0]<stdout>:skipping wd on stage4_unit1_bn_sc_gamma
[1,0]<stdout>:skipping wd on stage4_unit1_bn_sc_beta
[1,0]<stdout>:using wd on stage4_unit2_conv1_weight
[1,0]<stdout>:skipping wd on stage4_unit2_bn1_gamma
[1,0]<stdout>:skipping wd on stage4_unit2_bn1_beta
[1,0]<stdout>:using wd on stage4_unit2_conv2_weight
[1,0]<stdout>:skipping wd on stage4_unit2_bn2_gamma
[1,0]<stdout>:skipping wd on stage4_unit2_bn2_beta
[1,0]<stdout>:using wd on stage4_unit2_conv3_weight
[1,0]<stdout>:skipping wd on stage4_unit2_bn3_gamma
[1,0]<stdout>:skipping wd on stage4_unit2_bn3_beta
[1,0]<stdout>:using wd on stage4_unit3_conv1_weight
[1,0]<stdout>:skipping wd on stage4_unit3_bn1_gamma
[1,0]<stdout>:skipping wd on stage4_unit3_bn1_beta
[1,0]<stdout>:using wd on stage4_unit3_conv2_weight
[1,0]<stdout>:skipping wd on stage4_unit3_bn2_gamma
[1,0]<stdout>:skipping wd on stage4_unit3_bn2_beta
[1,0]<stdout>:using wd on stage4_unit3_conv3_weight
[1,0]<stdout>:skipping wd on stage4_unit3_bn3_gamma
[1,0]<stdout>:skipping wd on stage4_unit3_bn3_beta
[1,0]<stdout>:using wd on fc1_weight
[1,0]<stdout>:using wd on fc1_bias
[1,0]<stdout>::::MLL 1571677108.456 global_batch_size: {"metadata": {"lineno": 1112, "file": "common/fit.py"}, "value": 2496}
[1,0]<stderr>:2019-10-21 16:58:28,456 Node[0] Already bound, ignoring bind()
[1,0]<stdout>::::MLL 1571677108.457 block_start: {"metadata": {"first_epoch_num": 1, "epoch_count": 4, "lineno": 888, "file": "common/fit.py"}, "value": null}
[1,0]<stdout>::::MLL 1571677108.457 epoch_start: {"metadata": {"lineno": 893, "epoch_num": 1, "file": "common/fit.py"}, "value": null}
[1,1]<stderr>:2019-10-21 16:58:28,530 Node[1] Already bound, ignoring bind()
[1,7]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,7]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,7]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,7]<stderr>:  optimizer_params=optimizer_params)
[1,7]<stderr>:Traceback (most recent call last):
[1,7]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,7]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,7]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,7]<stderr>:    monitor=None)
[1,7]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,7]<stderr>:    pre_sliced=True)
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,7]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,7]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,7]<stderr>:    metric.update_dict(labels, preds)
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,7]<stderr>:    self.update(label, pred)
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,7]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,7]<stderr>:    ctypes.c_size_t(data.size)))
[1,7]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,7]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,7]<stderr>:mxnet.base.MXNetError: [16:58:27] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,7]<stderr>:Stack trace:
[1,7]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,7]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,7]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,7]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,7]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,7]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,7]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,7]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,7]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,7]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,7]<stderr>:
[1,7]<stderr>:
[1,6]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,6]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,6]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,6]<stderr>:  optimizer_params=optimizer_params)
[1,6]<stderr>:Traceback (most recent call last):
[1,6]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,6]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,6]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,6]<stderr>:    monitor=None)
[1,6]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,6]<stderr>:    pre_sliced=True)
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,6]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,6]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,6]<stderr>:    metric.update_dict(labels, preds)
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,6]<stderr>:    self.update(label, pred)
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,6]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,6]<stderr>:    ctypes.c_size_t(data.size)))
[1,6]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,6]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,6]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,6]<stderr>:Stack trace:
[1,6]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,6]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,6]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,6]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,6]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,6]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,6]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,6]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,6]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,6]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,6]<stderr>:
[1,6]<stderr>:
[1,5]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,5]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,5]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,5]<stderr>:  optimizer_params=optimizer_params)
[1,5]<stderr>:Traceback (most recent call last):
[1,5]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,5]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,5]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,5]<stderr>:    monitor=None)
[1,5]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,5]<stderr>:    pre_sliced=True)
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,5]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,5]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,5]<stderr>:    metric.update_dict(labels, preds)
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,5]<stderr>:    self.update(label, pred)
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,5]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,5]<stderr>:    ctypes.c_size_t(data.size)))
[1,5]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,5]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,5]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,5]<stderr>:Stack trace:
[1,5]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,5]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,5]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,5]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,5]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,5]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,5]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,5]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,5]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,5]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,5]<stderr>:
[1,5]<stderr>:
[1,2]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,2]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,2]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,2]<stderr>:  optimizer_params=optimizer_params)
[1,2]<stderr>:Traceback (most recent call last):
[1,2]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,2]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,2]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,2]<stderr>:    monitor=None)
[1,2]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,2]<stderr>:    pre_sliced=True)
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,2]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,2]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,2]<stderr>:    metric.update_dict(labels, preds)
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,2]<stderr>:    self.update(label, pred)
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,2]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,2]<stderr>:    ctypes.c_size_t(data.size)))
[1,2]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,2]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,2]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,2]<stderr>:Stack trace:
[1,2]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,2]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,2]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,2]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,2]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,2]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,2]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,2]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,2]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,2]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,2]<stderr>:
[1,2]<stderr>:
[1,4]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,4]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,4]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,4]<stderr>:  optimizer_params=optimizer_params)
[1,4]<stderr>:Traceback (most recent call last):
[1,4]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,4]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,4]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,4]<stderr>:    monitor=None)
[1,4]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,4]<stderr>:    pre_sliced=True)
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,4]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,4]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,4]<stderr>:    metric.update_dict(labels, preds)
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,4]<stderr>:    self.update(label, pred)
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,4]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,4]<stderr>:    ctypes.c_size_t(data.size)))
[1,4]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,4]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,4]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,4]<stderr>:Stack trace:
[1,4]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,4]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,4]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,4]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,4]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,4]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,4]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,4]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,4]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,4]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,4]<stderr>:
[1,4]<stderr>:
[1,3]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,3]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,3]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,3]<stderr>:  optimizer_params=optimizer_params)
[1,3]<stderr>:Traceback (most recent call last):
[1,3]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,3]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,3]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,3]<stderr>:    monitor=None)
[1,3]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,3]<stderr>:    pre_sliced=True)
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,3]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,3]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,3]<stderr>:    metric.update_dict(labels, preds)
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,3]<stderr>:    self.update(label, pred)
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,3]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,3]<stderr>:    ctypes.c_size_t(data.size)))
[1,3]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,3]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,3]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,3]<stderr>:Stack trace:
[1,3]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,3]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,3]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,3]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,3]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,3]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,3]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,3]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,3]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,3]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,3]<stderr>:
[1,3]<stderr>:
[1,1]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,1]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,1]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,1]<stderr>:  optimizer_params=optimizer_params)
[1,0]<stderr>:/workspace/image_classification/common/fit.py:858: UserWarning: Parameters already initialized and force_init=False. init_params call ignored.
[1,0]<stderr>:  allow_missing=allow_missing, force_init=force_init)
[1,0]<stderr>:/workspace/image_classification/common/fit.py:860: UserWarning: Optimizer created manually outside Module but rescale_grad is not normalized to 1.0/batch_size/num_workers (0.00040064102564102563 vs. 0.003205128205128205). Is this intended?
[1,0]<stderr>:  optimizer_params=optimizer_params)
[1,1]<stderr>:Traceback (most recent call last):
[1,1]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,1]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,1]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,1]<stderr>:    monitor=None)
[1,1]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,1]<stderr>:    pre_sliced=True)
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,1]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,1]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,1]<stderr>:    metric.update_dict(labels, preds)
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,1]<stderr>:    self.update(label, pred)
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,1]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,1]<stderr>:    ctypes.c_size_t(data.size)))
[1,1]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,1]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,1]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,1]<stderr>:Stack trace:
[1,1]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,1]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,1]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,1]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,1]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,1]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,1]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,0]<stderr>:Traceback (most recent call last):
[1,0]<stderr>:  File "train_imagenet.py", line 191, in <module>
[1,0]<stderr>:    fit.fit(args, kv, model, initializer, lambda_fnc_dali_get_rec_iter, devs, arg_params, aux_params)
[1,0]<stderr>:  File "/workspace/image_classification/common/fit.py", line 1140, in fit
[1,0]<stderr>:    monitor=None)
[1,0]<stderr>:  File "/workspace/image_classification/common/fit.py", line 910, in mlperf_fit
[1,0]<stderr>:    pre_sliced=True)
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/module/module.py", line 775, in update_metric
[1,0]<stderr>:    self._exec_group.update_metric(eval_metric, labels, pre_sliced, label_pads)
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/module/executor_group.py", line 664, in update_metric
[1,0]<stderr>:    eval_metric.update_dict(labels_, preds)
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 350, in update_dict
[1,0]<stderr>:    metric.update_dict(labels, preds)
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 133, in update_dict
[1,0]<stderr>:    self.update(label, pred)
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/metric.py", line 496, in update
[1,0]<stderr>:    pred_label = pred_label.asnumpy().astype('int32')
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/ndarray/ndarray.py", line 1995, in asnumpy
[1,0]<stderr>:    ctypes.c_size_t(data.size)))
[1,0]<stderr>:  File "/opt/mxnet/python/mxnet/base.py", line 251, in check_call
[1,0]<stderr>:    raise MXNetError(py_str(_LIB.MXGetLastError()))
[1,0]<stderr>:mxnet.base.MXNetError: [16:58:28] src/operator/nn/./cudnn/cudnn_convolution-inl.h:1021: Failed to get backprop-to-data convolution algorithm 1 with workspace size of 536870912 bytes, please consider reducing batch/model size or increasing the workspace size
[1,0]<stderr>:Stack trace:
[1,0]<stderr>:  [bt] (0) /usr/local/lib/libmxnet.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x32) [0x7fffbf2372d2]
[1,0]<stderr>:  [bt] (1) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::CuDNNAlgoSetter(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)+0x1a83) [0x7fffc2cdd363]
[1,0]<stderr>:  [bt] (2) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)::{lambda(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)#1}::operator()(mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*) const+0xe9f) [0x7fffc2ceed8f]
[1,0]<stderr>:  [bt] (3) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNAlgoReg<mxnet::op::ConvolutionParam>::FindOrElseRegister(mxnet::op::ConvolutionParam const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t, cudnnDataType_t, int, bool, mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*, std::function<void (mxnet::op::CuDNNAlgo<cudnnConvolutionFwdAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdDataAlgo_t>*, mxnet::op::CuDNNAlgo<cudnnConvolutionBwdFilterAlgo_t>*)> const&)+0x8d2) [0x7fffc2cf1572]
[1,0]<stderr>:  [bt] (4) /usr/local/lib/libmxnet.so(mxnet::op::CuDNNConvolutionOp<mshadow::half::half_t>::SelectAlgo(mxnet::RunContext const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, std::vector<nnvm::TShape, std::allocator<nnvm::TShape> > const&, cudnnDataType_t, cudnnDataType_t)+0x1f1) [0x7fffc2cf2861]
[1,0]<stderr>:  [bt] (5) /usr/local/lib/libmxnet.so(+0x493cd22) [0x7fffc2ca8d22]
[1,0]<stderr>:  [bt] (6) /usr/local/lib/libmxnet.so(void mxnet::op::ConvolutionCompute<mshadow::gpu>(nnvm::NodeAttrs const&, mxnet::OpContext const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&, std::vector<mxnet::OpReqType, std::allocator<mxnet::OpReqT[1,1]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,1]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,1]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,1]<stderr>:
[1,1]<stderr>:
[1,0]<stderr>:ype> > const&, std::vector<mxnet::TBlob, std::allocator<mxnet::TBlob> > const&)+0xd43) [0x7fffc2cabf73]
[1,0]<stderr>:  [bt] (7) /usr/local/lib/libmxnet.so(mxnet::exec::FComputeExecutor::Run(mxnet::RunContext, bool)+0x76) [0x7fffc25f6fd6]
[1,0]<stderr>:  [bt] (8) /usr/local/lib/libmxnet.so(+0x4253d03) [0x7fffc25bfd03]
[1,0]<stderr>:
[1,0]<stderr>:
--------------------------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code. Per user-direction, the job has been aborted.
--------------------------------------------------------------------------
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[62545,1],5]
  Exit code:    1
--------------------------------------------------------------------------
